/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logic.Controller;
import logic.Discipline;
import logic.Member;
import logic.Result;

/**
 *
 * @author caspe
 */
public class resultsDialog extends javax.swing.JDialog {

    Controller logic = new Controller();

    /**
     * Creates new form resultsDialog
     * @param parent the window where to popup "comes" from
     * @param modal tells if a popup is modal or not
     */
    public resultsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        //fillMemberComboBox();
        fillDisciplinesComboBox();

        

    }
    
//    private void fillMemberComboBox() {
//        try {
//
//            logic.updateMemberList();
//            DefaultComboBoxModel model = (DefaultComboBoxModel) membersComboBox.getModel();
//            model.removeAllElements();
//
//            for (Member member : logic.memberList) {
//                model.addElement(member.getID() + ", "+ member.getName());
//            }
//            membersComboBox.setModel(model);
//            //membersComboBox.setModel((ComboBoxModel<String>) logic.memberList);
//        } catch (Exception ex) {
//            Logger.getLogger(resultsDialog.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    private void fillDisciplinesComboBox() {
        try {
            logic.updateCategoryList();
            DefaultComboBoxModel model = (DefaultComboBoxModel) disciplinesComboBox.getModel();
            model.removeAllElements();
            
            for (Discipline discipline : logic.categoryList) {
                model.addElement(discipline.getId() + ", " + discipline.getName());
            }
            
            disciplinesComboBox.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(resultsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        disciplinesComboBox = new javax.swing.JComboBox<>();
        timeTXT = new javax.swing.JTextField();
        timeLBL = new javax.swing.JLabel();
        compBox = new javax.swing.JCheckBox();
        placeTXT = new javax.swing.JTextField();
        placeLBL = new javax.swing.JLabel();
        createResultBTN = new javax.swing.JButton();
        searchMailTime = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        memberTimeTable = new javax.swing.JTable();
        searchMailNewTime = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        disciplinesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        timeLBL.setText("time");

        compBox.setText("comp");

        placeLBL.setText("place");

        createResultBTN.setText("Create Result");
        createResultBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createResultBTNActionPerformed(evt);
            }
        });

        searchMailTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMailTimeActionPerformed(evt);
            }
        });

        memberTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Navn", "Mail"
            }
        ));
        jScrollPane1.setViewportView(memberTimeTable);

        searchMailNewTime.setText("SÃ¸g mail");
        searchMailNewTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMailNewTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchMailNewTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchMailTime))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeLBL))
                    .addComponent(disciplinesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(placeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(placeLBL))
                    .addComponent(compBox)
                    .addComponent(createResultBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchMailTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disciplinesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchMailNewTime, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeLBL))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(placeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(placeLBL))
                        .addGap(18, 18, 18)
                        .addComponent(compBox)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(createResultBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createResultBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createResultBTNActionPerformed
        try {
            // TODO add your handling code here:
            String time = timeTXT.getText();
            int discID = disciplinesComboBox.getSelectedIndex() + 1;
            String isComp = String.valueOf(compBox.isEnabled());
            String place = placeTXT.getText();
            int memberID = logic.memberList.get(memberTimeTable.convertRowIndexToModel(memberTimeTable.getSelectedRow())).getID();
            
            logic.createResult(memberID, discID, time, isComp, place);
            dispose();
        } catch (Exception ex) {
            Logger.getLogger(resultsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createResultBTNActionPerformed

    private void searchMailTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMailTimeActionPerformed
        
    }//GEN-LAST:event_searchMailTimeActionPerformed

    private void searchMailNewTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMailNewTimeActionPerformed
        try {
            logic.updateMemberList(searchMailTime.getText());
            DefaultTableModel model = (DefaultTableModel) memberTimeTable.getModel();
            model.setRowCount(0);
            for (Member member : logic.memberList) {
                model.addRow(new Object[]{member.getName(), member.getEmail()});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kunne ikke indlÃ¦se medlemmer..");
        }            
    }//GEN-LAST:event_searchMailNewTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(resultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(resultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(resultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(resultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                resultsDialog dialog = new resultsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox compBox;
    private javax.swing.JButton createResultBTN;
    private javax.swing.JComboBox<String> disciplinesComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable memberTimeTable;
    private javax.swing.JLabel placeLBL;
    private javax.swing.JTextField placeTXT;
    private javax.swing.JButton searchMailNewTime;
    private javax.swing.JTextField searchMailTime;
    private javax.swing.JLabel timeLBL;
    private javax.swing.JTextField timeTXT;
    // End of variables declaration//GEN-END:variables
}
